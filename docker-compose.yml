services:
  fastapi:
    container_name: fastapi_service
    build:
      context: .
      dockerfile: backend/app/Dockerfile
    volumes:
      - ./backend/app:/app
      - ./databases/sqlite:/databases/sqlite
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///databases/sqlite/products.db
      - KAFKA_BROKER_URL=kafka:9092
      - POSTGRES_HOST=postgres
      - SQLITE_DB_PATH=/databases/sqlite/products.db
    depends_on:
      - kafka
      - postgres
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka_service
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_MESSAGE_MAX_BYTES: '10485760'  # 10 MB
      KAFKA_MAX_REQUEST_SIZE: '10485760'  # 10 MB
      KAFKA_RECEIVE_BUFFER_BYTES: '10485760'  # 10 MB
      KAFKA_SEND_BUFFER_BYTES: '10485760'  # 10 MB
    depends_on:
      - zookeeper
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper_service
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:13
    container_name: postgres_service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: product_catalog
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/postgresql/init_postgres_schema.sql:/docker-entrypoint-initdb.d/init_postgres_schema.sql
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  debezium:
    image: debezium/connect:latest
    container_name: debezium_service
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
    depends_on:
      - kafka
      - postgres
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  flink-jobmanager:
    build:
      context: .
      dockerfile: flink/Dockerfile
    container_name: flink_jobmanager
    ports:
      - "8081:8081"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    volumes:
      - ./backend/flink_jobs:/opt/flink/jobs
      - ./databases/sqlite:/databases/sqlite
      - ./logs:/opt/flink/logs
    networks:
      - app_network
    depends_on:
      - kafka
    command: jobmanager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/overview"]
      interval: 30s
      timeout: 10s
      retries: 3

  flink-taskmanager:
    build:
      context: .
      dockerfile: flink/Dockerfile
    container_name: flink_taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    volumes:
      - ./backend/flink_jobs:/opt/flink/jobs
      - ./databases/sqlite:/databases/sqlite
      - ./logs:/opt/flink/logs
    networks:
      - app_network
    depends_on:
      - flink-jobmanager
    command: taskmanager

  flink-job-submitter:
    build:
      context: .
      dockerfile: flink/Dockerfile
    container_name: flink_job_submitter
    volumes:
      - ./backend/flink_jobs:/opt/flink/jobs
    networks:
      - app_network
    depends_on:
      - flink-jobmanager
      - flink-taskmanager
    command: >
      /bin/bash -c "
      echo 'Waiting for Flink JobManager to be ready...' &&
      sleep 30 &&
      echo 'Submitting Flink job...' &&
      flink run -d -py /opt/flink/jobs/flink_job.py
      "

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge
