services:
  fastapi:
    container_name: fastapi_service
    build:
      context: .
      dockerfile: backend/app/Dockerfile
    volumes:
      - ./backend/app:/app
      - ./databases/sqlite:/databases/sqlite
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///databases/sqlite/products.db
      - KAFKA_BROKER_URL=kafka:9092
      - POSTGRES_HOST=postgres
      - SQLITE_DB_PATH=/databases/sqlite/products.db
    depends_on:
      - kafka
      - postgres
      - debezium
    networks:
      - app_network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka_service
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - app_network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper_service
    ports:
      - "2181:2181"
    networks:
      - app_network

  postgres:
    image: postgres:13
    container_name: postgres_service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: product_catalog
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/postgresql/init_postgres_schema.sql:/docker-entrypoint-initdb.d/init_postgres_schema.sql
    ports:
      - "5432:5432"
    networks:
      - app_network

  debezium:
    image: debezium/connect:latest
    container_name: debezium_service
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    ports:
      - "8083:8083"
    depends_on:
      - kafka
    networks:
      - app_network

  flink-jobmanager:
    build:
      context: .
      dockerfile: flink/Dockerfile
    container_name: flink_jobmanager
    ports:
      - "8081:8081"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    volumes:
      - ./backend/flink_jobs:/flink_jobs
      - ./databases/sqlite:/databases/sqlite
    networks:
      - app_network
    depends_on:
      - kafka
    entrypoint: >
      /bin/sh -c "
      /docker-entrypoint.sh jobmanager;
      flink run -d -py /flink_jobs/flink_job.py
      "

  flink-taskmanager:
    build:
      context: .
      dockerfile: flink/Dockerfile
    container_name: flink_taskmanager
    depends_on:
      - flink-jobmanager
    command: ["taskmanager"]
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    volumes:
      - ./databases/sqlite:/databases/sqlite
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge
